Виртуальная машина Фон Нейммана.

Блок "транслятор".

Все строки байт-кода имеют вид: 4 элемента по 2 шестнадатиричных символа (точнее всё в десятичной системе, поэтому символа 3).

Первая строка: указатель на текущую команду.
Последние k строк: команды программы в байт-коде в обратном порядке.
Всё остальное (промежуточное): память для переменных, память "выделяется" сверху вниз. (Если таблица "ориентирована" сверху вниз.)

Объявление переменных (числовых): VAR. При объявлении позже вызова -- Undefined Behavior.
Использование повторное (внутри функции, когда название совпадает).

Команды:
Статус	Код		Название, атрибуты					Описание
		[001]	INP [VAR]							ввод в переменную VAR
		[002]	OUT [VAR]							вывод переменной VAR
		[012]	OUS [STR]							вывод переменной STR
		[003]	MVP [VAR1] [VAR2]					копирование переменной VAR2 в переменную VAR1
		[013]	MVV [VAR] [VAL]						занесение значение VAL в переменную VAR
		[014]	MSV [VSTR] [VAL]					занесение значение VAL в переменную STR
		[015]	VAR [VAR]							объявление переменной-числа.
		[020]	ADD [VAR1] [VAR2]					прибавление переменной VAR2 к переменной VAR1, результат в VAR1
		[021]	DIF [VAR1] [VAR2]					вычитание переменной VAR2 к переменной VAR1, результат в VAR1
		[022]	MUL [VAR1] [VAR2]					умножение переменной VAR2 на переменную VAR1, результат в VAR1
		[070]	PRP [VAR]							подготовка к вызову функции, значение которой вернётся в переменную VAR.
		[071]	FMV [VAR]							передача аргументов в функцию.
		[072]	CAL [NAME]							вызов функции NAME.
		[073]	FUN [NAME]							объявление функции, описание аргументов происходит с помощью команды FMV сразу после этой команты.
		[074]	FAV [VAR]							объявление аргументов функции (название).
		[075]	RET	[VAR]							конец функции, возвращается значение VAR
		[030]	LAB [LABEL]							метка.
		[031]	LQJ	[VAR] [LABEL]					условный оператор, вычисляет (VAR <= 0). В положительном случае происходит переход на метку.
		[032]	MQJ	[VAR] [LABEL]					условный оператор, вычисляет (VAR >= 0). В положительном случае происходит переход на метку.
		[033]	EQJ	[VAR] [LABEL]					условный оператор, вычисляет (VAR == 0). В положительном случае происходит переход на метку.
		[034]	NEJ	[VAR] [LABEL]					условный оператор, вычисляет (VAR != 0). В положительном случае происходит переход на метку.
		[035]	LEJ	[VAR] [LABEL]					условный оператор, вычисляет (VAR < 0). В положительном случае происходит переход на метку.
		[036]	MOJ	[VAR] [LABEL]					условный оператор, вычисляет (VAR > 0). В положительном случае происходит переход на метку.
		[042]	STP									окончание работы программы

Некоторые вспомогательные константы:
		[111]	[ADN]								данные переменной-числа.
		[123]	[AEF]								метка вызова функции.
		[222]	[ADS]								данные переменной-строки.
		[333]	[APN]								указатель на данные переменной-числа.
		[016]	VR2 -----							не является командой, вспомогательная константа.
		[076]	FU2	-----							не является командой, вспомогательная константа.
		[077]	FA2	-----							не является командой, вспомогательная константа.
		[078]	RE2	-----							не является командой, вспомогательная константа.
		[079]	RE3	-----							не является командой, вспомогательная константа.

Виды строк в байт-коде:

1. Первые два символа - код команды.
2. Вторые два символа -- указатель на переменную-приёмник.
3. Последние два символа -- указатель на переменную-источник.

Другие случаи:
1. 000 000 000 XXX -- первая строка, указатель на текущую команду (на строку XXX)
2. 111 000 000 XXX -- переменная VAR: XXX (значение) - число.
3. 222 000 YYY XXX -- переменная STR: XXX (значение) - символ, YYY (указатель на следующий символ). Если YYY == 000, то конец строки.
4. 03X YYY 000 XXX -- условные операторы, переход по адресу YYY, если выполняется условие на XXX.

Неописанные здесь случаи считать Undefined Behavior.
Так как язык слишком низкоуровневый, то писать нужно с максимальной аккуратностью.